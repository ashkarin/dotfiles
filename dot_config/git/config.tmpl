[user]
    name = Andrei Shkarin
    email = andrei.shkarin@gmail.com
    signingkey = {{ .chezmoi.homeDir }}/.ssh/sennder_com_ed25519.pub


[alias]
    # Log
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

    # Status
    s = status -s

    # Add
    a = add
    ai = add -p

    # Commit
    ct = commit -m
    amend = commit --amend

    # Switch
    sw = switch

    # Checkout
    co = checkout
    cob = checkout -b

    # Push
    p = push --no-verify
    pf = push --force-with-lease --no-verify

    # Undo
    undo = reset HEAD~1 --mixed

    # Pull
    up = pull

    # Wip
    wip = "!git add --all; git commit -m WIP"

    # Diff
    d = diff

    # Push local branch to remote
    plb = "!f() { git push -u origin $1}"

    # Clean untracked files
    clean = clean -f

    # Rebase
    # Rebase on top of branch
    rot = "!f() { git rebase -i --autosquash origin/\"$1\"; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Tags
    tags = tag -l

    # Branches
    branches = branch --sort=-committerdate --verbose --format='%(HEAD) %(color:red)%(objectname:short)%(color:reset) - %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(color:green)(%(committerdate:relative))%(color:reset) %(color:blue)<%(authorname)>%(color:reset)'

    remotes = remote -v

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered


[core]
    pager = delta
    autocrlf = input
    safecrlf = true
    excludesfile = ~/.config/git/ignore
    
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol,space-before-tab
    
    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[init]
    defaultBranch = main

[pull]
    rebase = false

[push]
    default = current
    autoSetupRemote = true
    
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[merge]
    conflictstyle = zdiff3

    # Include summaries of merged commits in newly created merge commit messages
    log = true

[delta]
    navigate = true
    hyperlinks = true
    side-by-side = true

[diff]
    renames = copies

[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[pager]
    blame = delta

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[interactive]
    diffFilter = delta --color-only

# URL shorthands

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"